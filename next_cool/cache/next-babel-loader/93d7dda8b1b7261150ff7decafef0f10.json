{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nexport default function UseDataGet(initialValue, initialUrl) {\n  var _useState = useState({\n    message: null\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var _useState2 = useState(false),\n      fetching = _useState2[0],\n      setFetching = _useState2[1];\n\n  var _useState3 = useState(false),\n      error = _useState3[0],\n      setError = _useState3[1];\n\n  var _useState4 = useState(false),\n      uncount = _useState4[0],\n      setUncount = _useState4[1];\n\n  var _useState5 = useState(initialUrl),\n      url = _useState5[0],\n      setUrl = _useState5[1];\n\n  useEffect(function () {\n    var getData = function getData() {\n      var request, data;\n      return _regeneratorRuntime.async(function getData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setError(false);\n              setFetching(true);\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(fetch(url));\n\n            case 4:\n              request = _context.sent;\n              _context.prev = 5;\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(request.json());\n\n            case 8:\n              data = _context.sent;\n              setState(data);\n              setFetching(false);\n              _context.next = 17;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](5);\n              console.log(_context.t0);\n              setError(true);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[5, 13]]);\n    };\n\n    if (!uncount) getData();\n    return function () {\n      setUncount(true);\n    };\n  }, [url]);\n  return [state, fetching, error, setUrl];\n}","map":{"version":3,"sources":["C:/test/component/public/useDateGet.js"],"names":["React","useEffect","useState","axios","UseDataGet","initialValue","initialUrl","message","state","setState","fetching","setFetching","error","setError","uncount","setUncount","url","setUrl","getData","fetch","request","json","data","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAwBC,QAAxB,QAAuC,OAAvC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,eAAiB,SAASC,UAAT,CAAoBC,YAApB,EAAiCC,UAAjC,EAA6C;AAAA,kBAE7BJ,QAAQ,CAAC;AAACK,IAAAA,OAAO,EAAC;AAAT,GAAD,CAFqB;AAAA,MAE/CC,KAF+C;AAAA,MAEzCC,QAFyC;;AAAA,mBAGvBP,QAAQ,CAAC,KAAD,CAHe;AAAA,MAG/CQ,QAH+C;AAAA,MAGtCC,WAHsC;;AAAA,mBAI7BT,QAAQ,CAAC,KAAD,CAJqB;AAAA,MAI/CU,KAJ+C;AAAA,MAIzCC,QAJyC;;AAAA,mBAKzBX,QAAQ,CAAC,KAAD,CALiB;AAAA,MAK/CY,OAL+C;AAAA,MAKvCC,UALuC;;AAAA,mBAMjCb,QAAQ,CAACI,UAAD,CANyB;AAAA,MAM/CU,GAN+C;AAAA,MAM3CC,MAN2C;;AAQtDhB,EAAAA,SAAS,CAAC,YAAM;AACb,QAAIiB,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AACVL,cAAAA,QAAQ,CAAC,KAAD,CAAR;AACAF,cAAAA,WAAW,CAAC,IAAD,CAAX;AAFU;AAAA,+CAGUQ,KAAK,CAACH,GAAD,CAHf;;AAAA;AAGLI,cAAAA,OAHK;AAAA;AAAA;AAAA,+CAKYA,OAAO,CAACC,IAAR,EALZ;;AAAA;AAKDC,cAAAA,IALC;AAMLb,cAAAA,QAAQ,CAACa,IAAD,CAAR;AACAX,cAAAA,WAAW,CAAC,KAAD,CAAX;AAPK;AAAA;;AAAA;AAAA;AAAA;AASLY,cAAAA,OAAO,CAACC,GAAR;AACAX,cAAAA,QAAQ,CAAC,IAAD,CAAR;;AAVK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAd;;AAaA,QAAG,CAACC,OAAJ,EAAaI,OAAO;AACpB,WAAO,YAAM;AACTH,MAAAA,UAAU,CAAC,IAAD,CAAV;AACH,KAFD;AAGF,GAlBQ,EAkBP,CAACC,GAAD,CAlBO,CAAT;AAmBA,SAAO,CAACR,KAAD,EAAOE,QAAP,EAAgBE,KAAhB,EAAsBK,MAAtB,CAAP;AAEL","sourcesContent":["import React,{useEffect,useState} from 'react'\r\nimport axios from 'axios'\r\nexport default   function UseDataGet(initialValue,initialUrl) {\r\n\r\n        const [state,setState] = useState({message:null});\r\n        const [fetching,setFetching] = useState(false);\r\n        const [error,setError] = useState(false);\r\n        const [uncount,setUncount] = useState(false);\r\n        const [url,setUrl] = useState(initialUrl); \r\n\r\n        useEffect(() => {\r\n           let getData = async () => {\r\n               setError(false);\r\n               setFetching(true);               \r\n                let request =await fetch(url);\r\n                try{\r\n                    let data = await request.json();\r\n                    setState(data);\r\n                    setFetching(false);\r\n                }catch(err){\r\n                    console.log(err);\r\n                    setError(true);\r\n                }\r\n           }\r\n           if(!uncount) getData()\r\n           return () => {\r\n               setUncount(true);\r\n           }\r\n        },[url])     \r\n        return [state,fetching,error,setUrl]\r\n    \r\n  }\r\n \r\n\r\n"]},"metadata":{},"sourceType":"module"}